<?php
namespace Framework\Renderer;

/**
 * class responsible to return the view
 * @author mochiwa
 */
class ViewBuilder implements IViewBuilder {
    
    /**
     * @var array list of directory path
     */
    private $directoryPaths=[];
    /**
     * @var ? list of global variable to share with view 
     */
    private $globals=[];
    
    /**
     * Append a path to a view directory
     * @param string $namepsace
     * @param string $path
     * @return void
     * 
     * @throws \InvalidArgumentException when the namespace is empty
     * @throws \InvalidArgumentException when the path is empty
     */
    public function addPath(string $namepsace , string $path):void
    {
        if(empty($namepsace))
            throw new \InvalidArgumentException ("The namespace cannot be empty");
        if(empty($path))
            throw new \InvalidArgumentException ("The path cannot be empty");
        
        $this->directoryPaths[$namepsace]=$path;
    }
    
    /**
     * try load load a view and return it
     * example of view:
     *  @mynamespace/header
     *  @Along/Namespace/file
     * @param string $view the view file name with the namespace 
     * @param array $parameters list of parametesr
     * @return string 
     * 
     * @throws \InvalidArgumentException when the view doesn't contain @
     * @throws \InvalidArgumentException when the view end by /
     * @throws \InvalidArgumentException when the namespace not found
     * @throws \InvalidArgumentException when the file not found
     */
    public function build(string $view,array $parameters=[]):string
    {
        $viewBuilder=null;
        $namespace =null;
        $file=null;
        
        
        if($view[0]!=='@')
            throw new \InvalidArgumentException ("The view must contain a namespace @");
        elseif($view[-1]==='/')
            throw new \InvalidArgumentException ("The view must be a file, it cannot ending with /");

        $namespace= $this->getNamespace($view);
        if(!array_key_exists($namespace, $this->directoryPaths))
            throw new \InvalidArgumentException ("The namespace : ".$namespace." has not been found");    
        
        $file=$this->getFilePath($namespace,$view);
        if(!file_exists($file))
            throw new \InvalidArgumentException ("The view file : ".$file." has not been found");   
        
        ob_start();
        extract($parameters);
        extract($this->globals);
        $viewBuilder=$this;
        require ($file);
        return ob_get_clean();
    }
    
    
    /**
     * Append a variable that can be used from anyview generated by this
     * @param string $key
     * @param type $data
     */
    public function addGlobal(string $key,$data)
    {
        $this->globals[$key]=$data;
    }
    
    private function getNamespace(string $view)
    {
        return substr($view, 1, strrpos($view, '/')-1);
    }
    private function getView(string $view)
    {
        return substr(strrchr($view, "/"), 1);
    }
    private function getFilePath($namespace,$view)
    {
       return $this->directoryPaths[$namespace].DIRECTORY_SEPARATOR.$this->getView($view).'.php';
    }
    
}
